Good Design Practices for Processes in OOP

1. Write or draw about the problem.
2. Extract key concepts from 1 and research them.
3. Create a class hierarchy and object map for the concepts.
4. Code the classes and test run them.
5. Repeat and refine.

--> This is a "top-down" process, meaning it starts from the very abstract
    loose idea and then slowly refines it until the idea is solid and
    something you can code.

--> Write about the problem, draw diagrams, maps, etc.
--> Go through these notes, drawings, and descriptions, and pull out key
    concepts: Make a list of all the nouns and verbs in your writings and
    drawings, then write out how they're related. This gives a good list of
    names for classes, objects, and functions.
--> Take this list of concepts and research any that don't make sense so you
    can refine them further.

--> Once you have a list of concepts, create a simple outline/tree of how
    they are related as classes.
--> "Is this one like other concept nouns? That means they have a common
    parent class, so what is it called?"
--> Keep doing this until you have a class hierarchy that's just a tree or
    diagram.
--> Then take the verbs you have and see if those are function names for each
    class and put them in your tree.

--> With this class hierarchy figured out, sit down and write some basic
    skeleton code.
--> Then write a test that runs this code and makes sure it works.


Top-Down vs Bottom-Up

--> Bottom-Up approach:

1. Take a small piece of the problem; hack on some code and get it to run barely.

2. Refine the code into something more formal with classes and automated tests.

3. Extract the key concepts you're using and try to find research for them.

4. Write a description of what's really going on.

5. Go back and refine the code, possibly throwing it out and starting over.

6. Repeat, moving on to some other piece of the problem.

--> This process is better once you're more solid at programming and are
    naturally thinking in code about problems. This process is very good when
    you know small pieces of the overall puzzle, but maybe don't have enough
    information yet about the overall concept. Breaking it down in little pieces
    and exploring with code then helps you slowly grind away at the problem
    until you've solved it. 
