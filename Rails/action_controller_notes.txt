Objectives:

- Follow the flow of a request through a controller
- Understand why and how to store data in the session or cookies
- Work with filters to execute code during request processing
- Use Action Controller's built-in HTTP authentication
- Stream data directly to the user's browser
- Filter sensitive parameters so they do not appear in the app's log
- Deal with exceptions that may be raised during request processing

1. What does a Controller do?
    - Action Controller is the C in MVC.
    - After routing as determined which controller to use for a request, your
      controller is responsible for making sense of the request and producing
      the appropriate output.
    - Luckily, Action Controller does most of the groundwork for you and uses
      smart conventions to make this as straightforward as possible.
    - For most conventional RESTful applications, the controller will receive
      the request (this is invisible to you as the developer), fetch or save data
      from a model and use a view to create HTML output.
    - A controller can thus be thought of as a middle man between models and views.
    - It makes the model data available to the view so it can display that data
      to the user, and it saves or updates data from the user to the model.

2. Methods and Actions
    - A controller is a Ruby class which inherits from ApplicationController
      and has methods just like any other class.
    - When your application receives a request, the routing will determine which
      controller and action to run, then Rails creates an instance of that
      controller and runs the method with the same name as the action.
    - ApplicationController inherits from ActionController::Base, which defines
      a number of helpful methods.
    - Only public methods are callable as actions.
    - It is a best practice to lower the visibility of methods which are not
      intended to be actions, like auxiliary methods or filters.

3. Parameters
    - You will probably want to access data sent in by the user or other
      parameters in your controller actions.
    - There are two kinds of parameters possible in a web application:
      a. Those sent as part of the URL, called query string parameters - everything
      that comes after the "?" in the URL.
      b. The second type of parameter is usually referred to as POST data.
         This info usually comes from an HTML from which has been filled by
         the user. It's called POST data b/c it can only be sent as part of an
         HTTP POST request.
    - Rails does not make any distinction between query string parameters and
      POST parameters, and both are available in the params hash in your
      controller.
